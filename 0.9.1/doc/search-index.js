var N=null,E="",T="t",U="u",searchIndex={};
var R=["chemfiles","Double","string","cellshape","result","option","property","properties","Get an iterator over all (name, property) pairs for this…","propertiesiter","add_atom","Add a bond between the atoms at indexes `i` and `j` in the…","bondorder","residueref","residue","atom_mut","Get a mutable reference to the atom at the given `index`…","add_bond","add_bond_with_order","remove_bond","Remove any existing bond between the atoms at indexes `i`…","add_residue","unitcell","topology","Get a property with the given `name` in this frame, if it…","trajectory","set_topology","Set the topology associated with this trajectory by…","set_cell","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","selection","ordering","partial_cmp","deref_mut","formatter","CellShape","BondOrder","Property","UnitCell","Topology","Trajectory","Selection","UnitCellRef","UnitCellMut","ResidueRef","TopologyRef","PropertiesIter"];

searchIndex[R[0]]={"doc":"Chemfiles is a multi-language library written in modern…","i":[[3,"Error",R[0],"Error type for Chemfiles.",N,N],[12,"status",E,"The error status code",0,N],[12,"message",E,"A message describing the error cause",0,N],[3,"Atom",E,"An `Atom` is a particle in the current `Frame`. It stores…",N,N],[3,"AtomRef",E,"An analog to a reference to an atom (`&Atom`)",N,N],[3,"AtomMut",E,"An analog to a mutable reference to an atom (`&mut Atom`)",N,N],[3,R[45],E,"An `UnitCell` represent the box containing the atoms, and…",N,N],[3,R[49],E,"An analog to a reference to an unit cell (`&UnitCell`)",N,N],[3,R[50],E,"An analog to a mutable reference to an unit cell (`&mut…",N,N],[3,"Residue",E,"A `Residue` is a group of atoms belonging to the same…",N,N],[3,R[51],E,"An analog to a reference to a residue (`&Residue`)",N,N],[3,R[46],E,"A `Topology` contains the definition of all the atoms in…",N,N],[3,R[52],E,"An analog to a reference to a topology (`&Topology`)",N,N],[3,"Frame",E,"A `Frame` contains data from one simulation step: the…",N,N],[3,R[47],E,"The `Trajectory` type is the main entry point when using…",N,N],[3,"Match",E,"A `Match` is a set of atomic indexes matching a given…",N,N],[3,R[48],E,"A `Selection` allow to select atoms in a `Frame`, from a…",N,N],[3,R[53],E,"An iterator over the properties in an atom/frame/residue",N,N],[4,"Status",E,"Possible causes of error in chemfiles",N,N],[13,"Success",E,"No error",1,N],[13,"MemoryError",E,"Error in memory allocations",1,N],[13,"FileError",E,"Error while reading or writing a file",1,N],[13,"FormatError",E,"Error in file formatting, i.e. the file is invalid",1,N],[13,"SelectionError",E,"Error in selection string syntax",1,N],[13,"ConfigurationError",E,"Error in configuration files syntax",1,N],[13,"OutOfBounds",E,"Error for out of bounds indexing",1,N],[13,"PropertyError",E,"Error related to properties",1,N],[13,"ChemfilesError",E,"Exception in the C++ chemfiles library",1,N],[13,"StdCppError",E,"Exception in the C++ standard library",1,N],[13,"UTF8PathError",E,"The given path is not valid UTF8",1,N],[4,R[42],E,"Available unit cell shapes.",N,N],[13,"Orthorhombic",E,"Orthorhombic cell, with the three angles equals to 90°.",2,N],[13,"Triclinic",E,"Triclinic cell, with any values for the angles.",2,N],[13,"Infinite",E,"Infinite cell, to use when there is no cell.",2,N],[4,R[43],E,"Possible bond order associated with bonds",N,N],[13,"Unknown",E,"Unknown or unspecified bond order",3,N],[13,"Single",E,"Single bond",3,N],[13,R[1],E,"Double bond",3,N],[13,"Triple",E,"Triple bond",3,N],[13,"Quadruple",E,"Quadruple bond (present in some metals)",3,N],[13,"Qintuplet",E,"Qintuplet bond (present in some metals)",3,N],[13,"Amide",E,"Amide bond (required by some file formats)",3,N],[13,"Aromatic",E,"Aromatic bond (required by some file formats)",3,N],[4,R[44],E,"A `Property` is a piece of data that can be associated…",N,N],[13,"Bool",E,"Boolean property",4,N],[13,R[1],E,"Floating point property",4,N],[13,"String",E,"String property",4,N],[13,"Vector3D",E,"3-dimensional vector property",4,N],[5,"set_warning_callback",E,"Use `callback` for every chemfiles warning. The callback…",N,[[["f"]]]],[5,"version",E,"Get the version of the chemfiles library.",N,[[],[R[2]]]],[5,"add_configuration",E,"Read configuration data from the file at `path`.",N,[[["s"]],[R[4],["error"]]]],[11,"last_error",E,"Get the last error message from the C++ library.",0,[[],[R[2]]]],[11,"cleanup",E,"Clear any error from the C++ library",0,[[]]],[11,"new",E,"Create an atom with the given `name`, and set the atom…",5,N],[11,"mass",E,"Get the atom mass, in atomic mass units.",5,[[["self"]],["f64"]]],[11,"set_mass",E,"Set the atom mass to `mass`, in atomic mass units.",5,[[["self"],["f64"]]]],[11,"charge",E,"Get the atom charge, in number of the electron charge e.",5,[[["self"]],["f64"]]],[11,"set_charge",E,"Set the atom charge to `charge`, in number of the electron…",5,[[["self"],["f64"]]]],[11,"name",E,"Get the atom name.",5,[[["self"]],[R[2]]]],[11,"atomic_type",E,"Get the atom type.",5,[[["self"]],[R[2]]]],[11,"set_name",E,"Set the atom name to `name`.",5,N],[11,"set_atomic_type",E,"Set the atom type to `atomic_type`.",5,N],[11,"full_name",E,"Try to get the full name of the atom from the atomic type.…",5,[[["self"]],[R[2]]]],[11,"vdw_radius",E,"Try to get the Van der Waals radius of the atom from the…",5,[[["self"]],["f64"]]],[11,"covalent_radius",E,"Try to get the covalent radius of the atom from the atomic…",5,[[["self"]],["f64"]]],[11,"atomic_number",E,"Try to get the atomic number of the atom from the atomic…",5,[[["self"]],["u64"]]],[11,"set",E,"Add a new `property` with the given `name` to this atom.",5,N],[11,"get",E,"Get a property with the given `name` in this atom, if it…",5,[[["self"],["str"]],[R[5],[R[6]]]]],[11,R[7],E,R[8],5,[[["self"]],[R[9]]]],[11,"new",E,"Create an `Orthorhombic` `UnitCell` from the three…",6,N],[11,"infinite",E,"Create an `Infinite` `UnitCell`.",6,[[],[R[22]]]],[11,"triclinic",E,"Create an `Triclinic` `UnitCell` from the three lengths…",6,N],[11,"lengths",E,"Get the three lengths of the cell, in Angstroms.",6,N],[11,"set_lengths",E,"Set the three lengths of the cell, in Angstroms.",6,N],[11,"angles",E,"Get the three angles of the cell, in degrees.",6,N],[11,"set_angles",E,"Set the three angles of the cell, in degrees. This is only…",6,N],[11,"matrix",E,"Get the unit cell matricial representation.",6,N],[11,"shape",E,"Get the shape of the unit cell.",6,[[["self"]],[R[3]]]],[11,"set_shape",E,"Set the shape of the unit cell to `shape`.",6,[[["self"],[R[3]]],[R[4],["error"]]]],[11,"volume",E,"Get the volume of the unit cell.",6,[[["self"]],["f64"]]],[11,"wrap",E,"Wrap a `vector` in this unit cell.",6,N],[11,"new",E,"Create a new residue with the given `name`",7,N],[11,"with_id",E,"Create a new residue with the given `name` and `id` as…",7,N],[11,"size",E,"Get the number of atoms in this residue.",7,[[["self"]],["u64"]]],[11,"id",E,"Get the identifier of this residue in the initial topology…",7,[[["self"]],[R[5],["u64"]]]],[11,"name",E,"Get the name of this residue.",7,[[["self"]],[R[2]]]],[11,R[10],E,"Add the atom at index `atom` in this residue.",7,[[["self"],["u64"]]]],[11,"contains",E,"Check if the atom at index `i` is in this residue",7,[[["self"],["u64"]],["bool"]]],[11,"set",E,"Add a new `property` with the given `name` to this residue.",7,N],[11,"get",E,R[24],7,[[["self"],["str"]],[R[5],[R[6]]]]],[11,R[7],E,R[8],7,[[["self"]],[R[9]]]],[11,"new",E,"Create a new empty topology.",8,[[],[R[23]]]],[11,"atom",E,"Get a reference of the atom at the given `index` in this…",8,[[["self"],["u64"]],["atomref"]]],[11,R[15],E,R[16],8,[[["self"],["u64"]],["atommut"]]],[11,"size",E,"Get the current number of atoms in this topology.",8,[[["self"]],["u64"]]],[11,"resize",E,"Resize this topology to hold `natoms` atoms, inserting…",8,[[["self"],["u64"]]]],[11,R[10],E,"Add an `Atom` at the end of this topology",8,[[["self"],["atom"]]]],[11,"remove",E,"Remove an `Atom` from this topology by `index`. This…",8,[[["self"],["u64"]]]],[11,"bonds_count",E,"Get the number of bonds in the topology.",8,[[["self"]],["u64"]]],[11,"angles_count",E,"Get the number of angles in the topology.",8,[[["self"]],["u64"]]],[11,"dihedrals_count",E,"Get the number of dihedral angles in the topology.",8,[[["self"]],["u64"]]],[11,"impropers_count",E,"Get the number of improper dihedral angles in the topology.",8,[[["self"]],["u64"]]],[11,"bonds",E,"Get the list of bonds in the topology.",8,[[["self"]],["vec"]]],[11,"angles",E,"Get the list of angles in the topology.",8,[[["self"]],["vec"]]],[11,"dihedrals",E,"Get the list of dihedral angles in the topology.",8,[[["self"]],["vec"]]],[11,"impropers",E,"Get the list of improper dihedral angles in the topology.",8,[[["self"]],["vec"]]],[11,R[17],E,R[11],8,[[["self"],["u64"],["u64"]]]],[11,R[18],E,R[11],8,[[["self"],["u64"],["u64"],[R[12]]]]],[11,"bond_order",E,"Get the bond order for the bond between the atoms at…",8,[[["self"],["u64"],["u64"]],[R[12]]]],[11,"bond_orders",E,"Get the bond order for all the bonds in the topology",8,[[["self"]],["vec",[R[12]]]]],[11,R[19],E,R[20],8,[[["self"],["u64"],["u64"]]]],[11,R[14],E,"Get a reference to the residue at index `index` from this…",8,[[["self"],["u64"]],[R[5],[R[13]]]]],[11,"residue_for_atom",E,"Get a copy of the residue containing the atom at index…",8,[[["self"],["u64"]],[R[5],[R[13]]]]],[11,"residues_count",E,"Get the number of residues in this topology.",8,[[["self"]],["u64"]]],[11,R[21],E,"Add a residue to this topology.",8,[[["self"],[R[14]]],[R[4],["error"]]]],[11,"are_linked",E,"Check if the two residues `first` and `second` from the…",8,[[["self"],[R[14]],[R[14]]],["bool"]]],[11,"new",E,"Create an empty frame. It will be resized by the library…",9,[[],["frame"]]],[11,"atom",E,"Get a reference to the atom at the given `index` in this…",9,[[["self"],["u64"]],["atomref"]]],[11,R[15],E,R[16],9,[[["self"],["u64"]],["atommut"]]],[11,"size",E,"Get the current number of atoms in this frame.",9,[[["self"]],["u64"]]],[11,"resize",E,"Resize the positions and the velocities in this frame, to…",9,[[["self"],["u64"]]]],[11,R[10],E,"Add an `Atom` and the corresponding position and…",9,N],[11,"remove",E,"Remove the atom at index `i` in this frame.",9,[[["self"],["usize"]]]],[11,R[17],E,R[11],9,[[["self"],["u64"],["u64"]]]],[11,R[18],E,R[11],9,[[["self"],["u64"],["u64"],[R[12]]]]],[11,R[19],E,R[20],9,[[["self"],["usize"],["usize"]]]],[11,R[21],E,"Add a copy of `residue` to this frame.",9,[[["self"],[R[14]]],[R[4],["error"]]]],[11,"distance",E,"Get the distance between the atoms at indexes `i` and `j`…",9,[[["self"],["usize"],["usize"]],["f64"]]],[11,"angle",E,"Get the angle formed by the atoms at indexes `i`, `j` and…",9,[[["self"],["usize"],["usize"],["usize"]],["f64"]]],[11,"dihedral",E,"Get the dihedral angle formed by the atoms at indexes `i`,…",9,[[["self"],["usize"],["usize"],["usize"],["usize"]],["f64"]]],[11,"out_of_plane",E,"Get the out of plane distance formed by the atoms at…",9,[[["self"],["usize"],["usize"],["usize"],["usize"]],["f64"]]],[11,"positions",E,"Get a view into the positions of this frame.",9,N],[11,"positions_mut",E,"Get a mutable view into the positions of this frame.",9,N],[11,"velocities",E,"Get a view into the velocities of this frame.",9,N],[11,"velocities_mut",E,"Get a mutable view into the velocities of this frame.",9,N],[11,"has_velocities",E,"Check if this frame contains velocity data.",9,[[["self"]],["bool"]]],[11,"add_velocities",E,"Add velocity data to this frame. If the frame already have…",9,[[["self"]]]],[11,"cell",E,"Get a reference to the `UnitCell` from this frame.",9,[[["self"]],["unitcellref"]]],[11,"cell_mut",E,"Get a mutable reference to the `UnitCell` from this frame.",9,[[["self"]],["unitcellmut"]]],[11,R[28],E,"Set the `UnitCell` of this frame to `cell`.",9,[[["self"],[R[22]]]]],[11,R[23],E,"Get a reference to the `Topology` of this frame.",9,[[["self"]],["topologyref"]]],[11,R[26],E,"Set the `Topology` of this frame to `topology`. The…",9,[[["self"],[R[23]]],[R[4],["error"]]]],[11,"step",E,"Get this frame step, i.e. the frame number in the trajectory",9,[[["self"]],["u64"]]],[11,"set_step",E,"Set this frame step to `step`.",9,[[["self"],["u64"]]]],[11,"guess_bonds",E,"Guess the bonds, angles and dihedrals in this `frame`.",9,[[["self"]],[R[4],["error"]]]],[11,"set",E,"Add a new `property` with the given `name` to this frame.",9,N],[11,"get",E,R[24],9,[[["self"],["str"]],[R[5],[R[6]]]]],[11,R[7],E,R[8],9,[[["self"]],[R[9]]]],[11,"open",E,"Open the file at the given `path` in the given `mode`.",10,[[["p"],["char"]],[R[4],[R[25],"error"]]]],[11,"open_with_format",E,"Open the file at the given `path` using a specific file…",10,[[["p"],["char"],["s"]],[R[4],[R[25],"error"]]]],[11,"read",E,"Read the next step of this trajectory into a `frame`.",10,[[["self"],["frame"]],[R[4],["error"]]]],[11,"read_step",E,"Read a specific `step` of this trajectory into a `frame`.",10,[[["self"],["u64"],["frame"]],[R[4],["error"]]]],[11,"write",E,"Write a `frame` to this trajectory.",10,[[["self"],["frame"]],[R[4],["error"]]]],[11,R[26],E,"Set the `topology` associated with this trajectory. This…",10,[[["self"],[R[23]]]]],[11,"set_topology_file",E,R[27],10,[[["self"],["p"]],[R[4],["error"]]]],[11,"set_topology_with_format",E,R[27],10,[[["self"],["p"],["s"]],[R[4],["error"]]]],[11,R[28],E,"Set the unit `cell` associated with a trajectory. This…",10,[[["self"],[R[22]]]]],[11,"nsteps",E,"Get the number of steps (the number of frames) in a…",10,[[["self"]],[R[4],["u64","error"]]]],[11,"path",E,"Get file path for this trajectory.",10,[[["self"]],[R[2]]]],[11,"len",E,"Get the length of the Match.",11,[[["self"]],["usize"]]],[11,"new",E,"Create a new match containing the atoms in the `atoms`…",11,N],[11,"iter",E,"Iterate over the atomic indexes in the match.",11,[[["self"]],["iter",["u64"]]]],[11,"new",E,"Create a new selection from the given selection string.",12,[[["s"]],[R[4],[R[37],"error"]]]],[11,"size",E,"Get the size of the selection, i.e. the number of atoms we…",12,[[["self"]],["u64"]]],[11,R[2],E,"Get the selection string used to create this selection.",12,[[["self"]],[R[2]]]],[11,"evaluate",E,"Evaluate a selection for a given frame, and return the…",12,[[["self"],["frame"]],[R[4],["vec","error"]]]],[11,"list",E,"Evaluates a selection of size 1 on a given `frame`. This…",12,[[["self"],["frame"]],[R[4],["vec","error"]]]],[11,"to_string",E,E,0,[[["self"]],[R[2]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,N],[11,R[31],E,E,0,[[[U]],[R[4]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[34],E,E,0,[[["self"]],[R[36]]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[4]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[30],E,E,5,N],[11,R[31],E,E,5,[[[U]],[R[4]]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[34],E,E,5,[[["self"]],[R[36]]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[4]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[31],E,E,13,[[[U]],[R[4]]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[34],E,E,13,[[["self"]],[R[36]]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[["self"]],[R[4]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[31],E,E,14,[[[U]],[R[4]]]],[11,R[35],E,E,14,[[["self"]],[T]]],[11,R[34],E,E,14,[[["self"]],[R[36]]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[["self"]],[R[4]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,N],[11,R[31],E,E,6,[[[U]],[R[4]]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[34],E,E,6,[[["self"]],[R[36]]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[R[4]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[31],E,E,15,[[[U]],[R[4]]]],[11,R[35],E,E,15,[[["self"]],[T]]],[11,R[34],E,E,15,[[["self"]],[R[36]]]],[11,R[32],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[["self"]],[R[4]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[31],E,E,16,[[[U]],[R[4]]]],[11,R[35],E,E,16,[[["self"]],[T]]],[11,R[34],E,E,16,[[["self"]],[R[36]]]],[11,R[32],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[["self"]],[R[4]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[30],E,E,7,N],[11,R[31],E,E,7,[[[U]],[R[4]]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[34],E,E,7,[[["self"]],[R[36]]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[4]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[31],E,E,17,[[[U]],[R[4]]]],[11,R[35],E,E,17,[[["self"]],[T]]],[11,R[34],E,E,17,[[["self"]],[R[36]]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[["self"]],[R[4]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,N],[11,R[31],E,E,8,[[[U]],[R[4]]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[34],E,E,8,[[["self"]],[R[36]]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[R[4]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[31],E,E,18,[[[U]],[R[4]]]],[11,R[35],E,E,18,[[["self"]],[T]]],[11,R[34],E,E,18,[[["self"]],[R[36]]]],[11,R[32],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[["self"]],[R[4]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[30],E,E,9,N],[11,R[31],E,E,9,[[[U]],[R[4]]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[34],E,E,9,[[["self"]],[R[36]]]],[11,R[32],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[R[4]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[31],E,E,10,[[[U]],[R[4]]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[34],E,E,10,[[["self"]],[R[36]]]],[11,R[32],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[4]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[30],E,E,11,N],[11,R[31],E,E,11,[[[U]],[R[4]]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[34],E,E,11,[[["self"]],[R[36]]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"]],[R[4]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[30],E,E,12,N],[11,R[31],E,E,12,[[[U]],[R[4]]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[34],E,E,12,[[["self"]],[R[36]]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[["self"]],[R[4]]]],[11,"into_iter",E,E,19,[[["self"]],["i"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[31],E,E,19,[[[U]],[R[4]]]],[11,R[35],E,E,19,[[["self"]],[T]]],[11,R[34],E,E,19,[[["self"]],[R[36]]]],[11,R[32],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,[[["self"]],[R[4]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,N],[11,R[31],E,E,1,[[[U]],[R[4]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[34],E,E,1,[[["self"]],[R[36]]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[4]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,N],[11,R[31],E,E,2,[[[U]],[R[4]]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[34],E,E,2,[[["self"]],[R[36]]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[4]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,N],[11,R[31],E,E,3,[[[U]],[R[4]]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[34],E,E,3,[[["self"]],[R[36]]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[4]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,N],[11,R[31],E,E,4,[[[U]],[R[4]]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[34],E,E,4,[[["self"]],[R[36]]]],[11,R[32],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[4]]]],[11,"next",E,E,19,[[["self"]],[R[5]]]],[11,"size_hint",E,E,19,N],[11,"count",E,E,19,[[["self"]],["usize"]]],[11,"eq",E,E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,1,[[["self"],["status"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[12]]],["bool"]]],[11,"eq",E,E,11,[[["self"],["match"]],["bool"]]],[11,"ne",E,E,11,[[["self"],["match"]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"cmp",E,E,3,[[["self"],[R[12]]],[R[38]]]],[11,"clone",E,E,0,[[["self"]],["error"]]],[11,"clone",E,E,1,[[["self"]],["status"]]],[11,"clone",E,E,5,[[["self"]],["atom"]]],[11,"clone",E,E,2,[[["self"]],[R[3]]]],[11,"clone",E,E,6,[[["self"]],[R[22]]]],[11,"clone",E,E,7,[[["self"]],[R[14]]]],[11,"clone",E,E,3,[[["self"]],[R[12]]]],[11,"clone",E,E,8,[[["self"]],[R[23]]]],[11,"clone",E,E,9,[[["self"]],["frame"]]],[11,"clone",E,E,11,[[["self"]],["match"]]],[11,"clone",E,E,12,[[["self"]],[R[37]]]],[11,"clone",E,E,4,[[["self"]],[R[6]]]],[11,"from",E,E,0,[[["chfl_status"]],["error"]]],[11,"from",E,E,2,[[["chfl_cellshape"]],[R[3]]]],[11,"from",E,E,3,[[["chfl_bond_order"]],[R[12]]]],[11,"from",E,E,4,[[["bool"]],["self"]]],[11,"from",E,E,4,[[["f64"]],["self"]]],[11,"from",E,E,4,[[[R[2]]],["self"]]],[11,"from",E,E,4,[[["str"]],["self"]]],[11,"from",E,E,4,N],[11,"drop",E,E,5,[[["self"]]]],[11,"drop",E,E,6,[[["self"]]]],[11,"drop",E,E,7,[[["self"]]]],[11,"drop",E,E,8,[[["self"]]]],[11,"drop",E,E,9,[[["self"]]]],[11,"drop",E,E,10,[[["self"]]]],[11,"drop",E,E,12,[[["self"]]]],[11,R[39],E,E,3,[[["self"],[R[12]]],[R[5],[R[38]]]]],[11,R[39],E,E,4,[[["self"],[R[6]]],[R[5],[R[38]]]]],[11,"lt",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[6]]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[41]]],[R[4],["error"]]]],[11,R[40],E,E,14,[[["self"]],["atom"]]],[11,R[40],E,E,16,[[["self"]],[R[22]]]],[11,"deref",E,E,13,[[["self"]],["atom"]]],[11,"deref",E,E,14,[[["self"]],["atom"]]],[11,"deref",E,E,15,[[["self"]],[R[22]]]],[11,"deref",E,E,16,[[["self"]],[R[22]]]],[11,"deref",E,E,17,[[["self"]],[R[14]]]],[11,"deref",E,E,18,[[["self"]],[R[23]]]],[11,"index",E,E,11,[[["self"],["usize"]],["u64"]]],[11,"fmt",E,E,0,[[["self"],[R[41]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[41]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[41]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[41]]],[R[4]]]],[11,"fmt",E,E,11,[[["self"],[R[41]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[41]]],[R[4]]]],[11,"description",E,E,0,[[["self"]],["str"]]]],"p":[[3,"Error"],[4,"Status"],[4,R[42]],[4,R[43]],[4,R[44]],[3,"Atom"],[3,R[45]],[3,"Residue"],[3,R[46]],[3,"Frame"],[3,R[47]],[3,"Match"],[3,R[48]],[3,"AtomRef"],[3,"AtomMut"],[3,R[49]],[3,R[50]],[3,R[51]],[3,R[52]],[3,R[53]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);