var N = null;var searchIndex = {};
searchIndex["chemfiles"]={"doc":"Chemfiles is a multi-language library written in modern…","items":[[3,"Error","chemfiles","Error type for Chemfiles.",N,N],[12,"status","","The error status code",0,N],[12,"message","","A message describing the error cause",0,N],[3,"Atom","","An `Atom` is a particle in the current `Frame`. It stores…",N,N],[3,"AtomRef","","An analog to a reference to an atom (`&Atom`)",N,N],[3,"AtomMut","","An analog to a mutable reference to an atom (`&mut Atom`)",N,N],[3,"UnitCell","","An `UnitCell` represent the box containing the atoms, and…",N,N],[3,"UnitCellRef","","An analog to a reference to an unit cell (`&UnitCell`)",N,N],[3,"UnitCellMut","","An analog to a mutable reference to an unit cell (`&mut…",N,N],[3,"Residue","","A `Residue` is a group of atoms belonging to the same…",N,N],[3,"ResidueRef","","An analog to a reference to a residue (`&Residue`)",N,N],[3,"Topology","","A `Topology` contains the definition of all the atoms in…",N,N],[3,"TopologyRef","","An analog to a reference to a topology (`&Topology`)",N,N],[3,"Frame","","A `Frame` contains data from one simulation step: the…",N,N],[3,"Trajectory","","The `Trajectory` type is the main entry point when using…",N,N],[3,"Match","","A `Match` is a set of atomic indexes matching a given…",N,N],[3,"Selection","","A `Selection` allow to select atoms in a `Frame`, from a…",N,N],[3,"PropertiesIter","","An iterator over the properties in an atom/frame/residue",N,N],[4,"Status","","Possible causes of error in chemfiles",N,N],[13,"Success","","No error",1,N],[13,"MemoryError","","Error in memory allocations",1,N],[13,"FileError","","Error while reading or writing a file",1,N],[13,"FormatError","","Error in file formatting, i.e. the file is invalid",1,N],[13,"SelectionError","","Error in selection string syntax",1,N],[13,"ConfigurationError","","Error in configuration files syntax",1,N],[13,"OutOfBounds","","Error for out of bounds indexing",1,N],[13,"PropertyError","","Error related to properties",1,N],[13,"ChemfilesError","","Exception in the C++ chemfiles library",1,N],[13,"StdCppError","","Exception in the C++ standard library",1,N],[13,"UTF8PathError","","The given path is not valid UTF8",1,N],[4,"CellShape","","Available unit cell shapes.",N,N],[13,"Orthorhombic","","Orthorhombic cell, with the three angles equals to 90°.",2,N],[13,"Triclinic","","Triclinic cell, with any values for the angles.",2,N],[13,"Infinite","","Infinite cell, to use when there is no cell.",2,N],[4,"BondOrder","","Possible bond order associated with bonds",N,N],[13,"Unknown","","Unknown or unspecified bond order",3,N],[13,"Single","","Single bond",3,N],[13,"Double","","Double bond",3,N],[13,"Triple","","Triple bond",3,N],[13,"Quadruple","","Quadruple bond (present in some metals)",3,N],[13,"Qintuplet","","Qintuplet bond (present in some metals)",3,N],[13,"Amide","","Amide bond (required by some file formats)",3,N],[13,"Aromatic","","Aromatic bond (required by some file formats)",3,N],[4,"Property","","A `Property` is a piece of data that can be associated…",N,N],[13,"Bool","","Boolean property",4,N],[13,"Double","","Floating point property",4,N],[13,"String","","String property",4,N],[13,"Vector3D","","3-dimensional vector property",4,N],[5,"set_warning_callback","","Use `callback` for every chemfiles warning. The callback…",N,[[["f"]]]],[5,"version","","Get the version of the chemfiles library.",N,[[],["string"]]],[5,"add_configuration","","Read configuration data from the file at `path`.",N,[[["s"]],["result",["error"]]]],[11,"last_error","","Get the last error message from the C++ library.",0,[[],["string"]]],[11,"cleanup","","Clear any error from the C++ library",0,[[]]],[11,"new","","Create an atom with the given `name`, and set the atom…",5,N],[11,"mass","","Get the atom mass, in atomic mass units.",5,[[["self"]],["f64"]]],[11,"set_mass","","Set the atom mass to `mass`, in atomic mass units.",5,[[["self"],["f64"]]]],[11,"charge","","Get the atom charge, in number of the electron charge e.",5,[[["self"]],["f64"]]],[11,"set_charge","","Set the atom charge to `charge`, in number of the electron…",5,[[["self"],["f64"]]]],[11,"name","","Get the atom name.",5,[[["self"]],["string"]]],[11,"atomic_type","","Get the atom type.",5,[[["self"]],["string"]]],[11,"set_name","","Set the atom name to `name`.",5,N],[11,"set_atomic_type","","Set the atom type to `atomic_type`.",5,N],[11,"full_name","","Try to get the full name of the atom from the atomic type.…",5,[[["self"]],["string"]]],[11,"vdw_radius","","Try to get the Van der Waals radius of the atom from the…",5,[[["self"]],["f64"]]],[11,"covalent_radius","","Try to get the covalent radius of the atom from the atomic…",5,[[["self"]],["f64"]]],[11,"atomic_number","","Try to get the atomic number of the atom from the atomic…",5,[[["self"]],["u64"]]],[11,"set","","Add a new `property` with the given `name` to this atom.",5,N],[11,"get","","Get a property with the given `name` in this atom, if it…",5,[[["self"],["str"]],["option",["property"]]]],[11,"properties","","Get an iterator over all (name, property) pairs for this…",5,[[["self"]],["propertiesiter"]]],[11,"new","","Create an `Orthorhombic` `UnitCell` from the three…",6,N],[11,"infinite","","Create an `Infinite` `UnitCell`.",6,[[],["unitcell"]]],[11,"triclinic","","Create an `Triclinic` `UnitCell` from the three lengths…",6,N],[11,"lengths","","Get the three lengths of the cell, in Angstroms.",6,N],[11,"set_lengths","","Set the three lengths of the cell, in Angstroms.",6,N],[11,"angles","","Get the three angles of the cell, in degrees.",6,N],[11,"set_angles","","Set the three angles of the cell, in degrees. This is only…",6,N],[11,"matrix","","Get the unit cell matricial representation.",6,N],[11,"shape","","Get the shape of the unit cell.",6,[[["self"]],["cellshape"]]],[11,"set_shape","","Set the shape of the unit cell to `shape`.",6,[[["self"],["cellshape"]],["result",["error"]]]],[11,"volume","","Get the volume of the unit cell.",6,[[["self"]],["f64"]]],[11,"wrap","","Wrap a `vector` in this unit cell.",6,N],[11,"new","","Create a new residue with the given `name`",7,N],[11,"with_id","","Create a new residue with the given `name` and `id` as…",7,N],[11,"size","","Get the number of atoms in this residue.",7,[[["self"]],["u64"]]],[11,"id","","Get the identifier of this residue in the initial topology…",7,[[["self"]],["option",["u64"]]]],[11,"name","","Get the name of this residue.",7,[[["self"]],["string"]]],[11,"add_atom","","Add the atom at index `atom` in this residue.",7,[[["self"],["u64"]]]],[11,"contains","","Check if the atom at index `i` is in this residue",7,[[["self"],["u64"]],["bool"]]],[11,"set","","Add a new `property` with the given `name` to this residue.",7,N],[11,"get","","Get a property with the given `name` in this frame, if it…",7,[[["self"],["str"]],["option",["property"]]]],[11,"properties","","Get an iterator over all (name, property) pairs for this…",7,[[["self"]],["propertiesiter"]]],[11,"new","","Create a new empty topology.",8,[[],["topology"]]],[11,"atom","","Get a reference of the atom at the given `index` in this…",8,[[["self"],["u64"]],["atomref"]]],[11,"atom_mut","","Get a mutable reference to the atom at the given `index`…",8,[[["self"],["u64"]],["atommut"]]],[11,"size","","Get the current number of atoms in this topology.",8,[[["self"]],["u64"]]],[11,"resize","","Resize this topology to hold `natoms` atoms, inserting…",8,[[["self"],["u64"]]]],[11,"add_atom","","Add an `Atom` at the end of this topology",8,[[["self"],["atom"]]]],[11,"remove","","Remove an `Atom` from this topology by `index`. This…",8,[[["self"],["u64"]]]],[11,"bonds_count","","Get the number of bonds in the topology.",8,[[["self"]],["u64"]]],[11,"angles_count","","Get the number of angles in the topology.",8,[[["self"]],["u64"]]],[11,"dihedrals_count","","Get the number of dihedral angles in the topology.",8,[[["self"]],["u64"]]],[11,"impropers_count","","Get the number of improper dihedral angles in the topology.",8,[[["self"]],["u64"]]],[11,"bonds","","Get the list of bonds in the topology.",8,[[["self"]],["vec"]]],[11,"angles","","Get the list of angles in the topology.",8,[[["self"]],["vec"]]],[11,"dihedrals","","Get the list of dihedral angles in the topology.",8,[[["self"]],["vec"]]],[11,"impropers","","Get the list of improper dihedral angles in the topology.",8,[[["self"]],["vec"]]],[11,"add_bond","","Add a bond between the atoms at indexes `i` and `j` in the…",8,[[["self"],["u64"],["u64"]]]],[11,"add_bond_with_order","","Add a bond between the atoms at indexes `i` and `j` in the…",8,[[["self"],["u64"],["u64"],["bondorder"]]]],[11,"bond_order","","Get the bond order for the bond between the atoms at…",8,[[["self"],["u64"],["u64"]],["bondorder"]]],[11,"bond_orders","","Get the bond order for all the bonds in the topology",8,[[["self"]],["vec",["bondorder"]]]],[11,"remove_bond","","Remove any existing bond between the atoms at indexes `i`…",8,[[["self"],["u64"],["u64"]]]],[11,"residue","","Get a reference to the residue at index `index` from this…",8,[[["self"],["u64"]],["option",["residueref"]]]],[11,"residue_for_atom","","Get a copy of the residue containing the atom at index…",8,[[["self"],["u64"]],["option",["residueref"]]]],[11,"residues_count","","Get the number of residues in this topology.",8,[[["self"]],["u64"]]],[11,"add_residue","","Add a residue to this topology.",8,[[["self"],["residue"]],["result",["error"]]]],[11,"are_linked","","Check if the two residues `first` and `second` from the…",8,[[["self"],["residue"],["residue"]],["bool"]]],[11,"new","","Create an empty frame. It will be resized by the library…",9,[[],["frame"]]],[11,"atom","","Get a reference to the atom at the given `index` in this…",9,[[["self"],["u64"]],["atomref"]]],[11,"atom_mut","","Get a mutable reference to the atom at the given `index`…",9,[[["self"],["u64"]],["atommut"]]],[11,"size","","Get the current number of atoms in this frame.",9,[[["self"]],["u64"]]],[11,"resize","","Resize the positions and the velocities in this frame, to…",9,[[["self"],["u64"]]]],[11,"add_atom","","Add an `Atom` and the corresponding position and…",9,N],[11,"remove","","Remove the atom at index `i` in this frame.",9,[[["self"],["usize"]]]],[11,"add_bond","","Add a bond between the atoms at indexes `i` and `j` in the…",9,[[["self"],["u64"],["u64"]]]],[11,"add_bond_with_order","","Add a bond between the atoms at indexes `i` and `j` in the…",9,[[["self"],["u64"],["u64"],["bondorder"]]]],[11,"remove_bond","","Remove any existing bond between the atoms at indexes `i`…",9,[[["self"],["usize"],["usize"]]]],[11,"add_residue","","Add a copy of `residue` to this frame.",9,[[["self"],["residue"]],["result",["error"]]]],[11,"distance","","Get the distance between the atoms at indexes `i` and `j`…",9,[[["self"],["usize"],["usize"]],["f64"]]],[11,"angle","","Get the angle formed by the atoms at indexes `i`, `j` and…",9,[[["self"],["usize"],["usize"],["usize"]],["f64"]]],[11,"dihedral","","Get the dihedral angle formed by the atoms at indexes `i`,…",9,[[["self"],["usize"],["usize"],["usize"],["usize"]],["f64"]]],[11,"out_of_plane","","Get the out of plane distance formed by the atoms at…",9,[[["self"],["usize"],["usize"],["usize"],["usize"]],["f64"]]],[11,"positions","","Get a view into the positions of this frame.",9,N],[11,"positions_mut","","Get a mutable view into the positions of this frame.",9,N],[11,"velocities","","Get a view into the velocities of this frame.",9,N],[11,"velocities_mut","","Get a mutable view into the velocities of this frame.",9,N],[11,"has_velocities","","Check if this frame contains velocity data.",9,[[["self"]],["bool"]]],[11,"add_velocities","","Add velocity data to this frame. If the frame already have…",9,[[["self"]]]],[11,"cell","","Get a reference to the `UnitCell` from this frame.",9,[[["self"]],["unitcellref"]]],[11,"cell_mut","","Get a mutable reference to the `UnitCell` from this frame.",9,[[["self"]],["unitcellmut"]]],[11,"set_cell","","Set the `UnitCell` of this frame to `cell`.",9,[[["self"],["unitcell"]]]],[11,"topology","","Get a reference to the `Topology` of this frame.",9,[[["self"]],["topologyref"]]],[11,"set_topology","","Set the `Topology` of this frame to `topology`. The…",9,[[["self"],["topology"]],["result",["error"]]]],[11,"step","","Get this frame step, i.e. the frame number in the trajectory",9,[[["self"]],["u64"]]],[11,"set_step","","Set this frame step to `step`.",9,[[["self"],["u64"]]]],[11,"guess_bonds","","Guess the bonds, angles and dihedrals in this `frame`.",9,[[["self"]],["result",["error"]]]],[11,"set","","Add a new `property` with the given `name` to this frame.",9,N],[11,"get","","Get a property with the given `name` in this frame, if it…",9,[[["self"],["str"]],["option",["property"]]]],[11,"properties","","Get an iterator over all (name, property) pairs for this…",9,[[["self"]],["propertiesiter"]]],[11,"open","","Open the file at the given `path` in the given `mode`.",10,[[["p"],["char"]],["result",["trajectory","error"]]]],[11,"open_with_format","","Open the file at the given `path` using a specific file…",10,[[["p"],["char"],["s"]],["result",["trajectory","error"]]]],[11,"read","","Read the next step of this trajectory into a `frame`.",10,[[["self"],["frame"]],["result",["error"]]]],[11,"read_step","","Read a specific `step` of this trajectory into a `frame`.",10,[[["self"],["u64"],["frame"]],["result",["error"]]]],[11,"write","","Write a `frame` to this trajectory.",10,[[["self"],["frame"]],["result",["error"]]]],[11,"set_topology","","Set the `topology` associated with this trajectory. This…",10,[[["self"],["topology"]]]],[11,"set_topology_file","","Set the topology associated with this trajectory by…",10,[[["self"],["p"]],["result",["error"]]]],[11,"set_topology_with_format","","Set the topology associated with this trajectory by…",10,[[["self"],["p"],["s"]],["result",["error"]]]],[11,"set_cell","","Set the unit `cell` associated with a trajectory. This…",10,[[["self"],["unitcell"]]]],[11,"nsteps","","Get the number of steps (the number of frames) in a…",10,[[["self"]],["result",["u64","error"]]]],[11,"path","","Get file path for this trajectory.",10,[[["self"]],["string"]]],[11,"len","","Get the length of the Match.",11,[[["self"]],["usize"]]],[11,"new","","Create a new match containing the atoms in the `atoms`…",11,N],[11,"iter","","Iterate over the atomic indexes in the match.",11,[[["self"]],["iter",["u64"]]]],[11,"new","","Create a new selection from the given selection string.",12,[[["s"]],["result",["selection","error"]]]],[11,"size","","Get the size of the selection, i.e. the number of atoms we…",12,[[["self"]],["u64"]]],[11,"string","","Get the selection string used to create this selection.",12,[[["self"]],["string"]]],[11,"evaluate","","Evaluate a selection for a given frame, and return the…",12,[[["self"],["frame"]],["result",["vec","error"]]]],[11,"list","","Evaluates a selection of size 1 on a given `frame`. This…",12,[[["self"],["frame"]],["result",["vec","error"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",1,[[["self"],["status"]],["bool"]]],[11,"eq","","",2,[[["self"],["cellshape"]],["bool"]]],[11,"eq","","",3,[[["self"],["bondorder"]],["bool"]]],[11,"eq","","",11,[[["self"],["match"]],["bool"]]],[11,"ne","","",11,[[["self"],["match"]],["bool"]]],[11,"eq","","",4,[[["self"],["property"]],["bool"]]],[11,"ne","","",4,[[["self"],["property"]],["bool"]]],[11,"cmp","","",3,[[["self"],["bondorder"]],["ordering"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"clone","","",1,[[["self"]],["status"]]],[11,"clone","","",5,[[["self"]],["atom"]]],[11,"clone","","",2,[[["self"]],["cellshape"]]],[11,"clone","","",6,[[["self"]],["unitcell"]]],[11,"clone","","",7,[[["self"]],["residue"]]],[11,"clone","","",3,[[["self"]],["bondorder"]]],[11,"clone","","",8,[[["self"]],["topology"]]],[11,"clone","","",9,[[["self"]],["frame"]]],[11,"clone","","",11,[[["self"]],["match"]]],[11,"clone","","",12,[[["self"]],["selection"]]],[11,"clone","","",4,[[["self"]],["property"]]],[11,"from","","",0,[[["chfl_status"]],["error"]]],[11,"from","","",2,[[["chfl_cellshape"]],["cellshape"]]],[11,"from","","",3,[[["chfl_bond_order"]],["bondorder"]]],[11,"from","","",4,[[["bool"]],["self"]]],[11,"from","","",4,[[["f64"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,N],[11,"drop","","",5,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"drop","","",8,[[["self"]]]],[11,"drop","","",9,[[["self"]]]],[11,"drop","","",10,[[["self"]]]],[11,"drop","","",12,[[["self"]]]],[11,"partial_cmp","","",3,[[["self"],["bondorder"]],["option",["ordering"]]]],[11,"partial_cmp","","",4,[[["self"],["property"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["property"]],["bool"]]],[11,"le","","",4,[[["self"],["property"]],["bool"]]],[11,"gt","","",4,[[["self"],["property"]],["bool"]]],[11,"ge","","",4,[[["self"],["property"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"deref_mut","","",14,[[["self"]],["atom"]]],[11,"deref_mut","","",16,[[["self"]],["unitcell"]]],[11,"deref","","",13,[[["self"]],["atom"]]],[11,"deref","","",14,[[["self"]],["atom"]]],[11,"deref","","",15,[[["self"]],["unitcell"]]],[11,"deref","","",16,[[["self"]],["unitcell"]]],[11,"deref","","",17,[[["self"]],["residue"]]],[11,"deref","","",18,[[["self"]],["topology"]]],[11,"index","","",11,[[["self"],["usize"]],["u64"]]],[11,"description","","",0,[[["self"]],["str"]]]],"paths":[[3,"Error"],[4,"Status"],[4,"CellShape"],[4,"BondOrder"],[4,"Property"],[3,"Atom"],[3,"UnitCell"],[3,"Residue"],[3,"Topology"],[3,"Frame"],[3,"Trajectory"],[3,"Match"],[3,"Selection"],[3,"AtomRef"],[3,"AtomMut"],[3,"UnitCellRef"],[3,"UnitCellMut"],[3,"ResidueRef"],[3,"TopologyRef"],[3,"PropertiesIter"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
