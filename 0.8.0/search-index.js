var searchIndex = {};
searchIndex["chemfiles"] = {"doc":"Chemfiles is a multi-language library written in modern C++ for reading and writing from and to molecular trajectory files. These files are created by your favorite theoretical chemistry program, and contains informations about atomic or residues names and positions. Some format also have additional informations, such as velocities, forces, energy, …","items":[[3,"Error","chemfiles","Error type for Chemfiles.",null,null],[12,"status","","The error status code",0,null],[12,"message","","A message describing the error cause",0,null],[3,"Atom","","An `Atom` is a particle in the current `Frame`. It stores the following atomic properties:",null,null],[3,"UnitCell","","An `UnitCell` represent the box containing the atoms, and its periodicity.",null,null],[3,"Residue","","A `Residue` is a group of atoms belonging to the same logical unit. They can be small molecules, amino-acids in a protein, monomers in polymers, etc.",null,null],[3,"Topology","","A `Topology` contains the definition of all the atoms in the system, and the liaisons between the atoms (bonds, angles, dihedrals, ...). It will also contain all the residues information if it is available.",null,null],[3,"Frame","","A `Frame` contains data from one simulation step: the current unit cell, the topology, the positions, and the velocities of the particles in the system. If some information is missing (topology or velocity or unit cell), the corresponding data is filled with a default value.",null,null],[3,"Trajectory","","The `Trajectory` type is the main entry point when using chemfiles. A `Trajectory` behave a bit like a file, allowing to read and/or write `Frame`.",null,null],[3,"Match","","A `Match` is a set of atomic indexes matching a given selection. It can mostly be used like a `&[u64]`.",null,null],[3,"Selection","","A `Selection` allow to select atoms in a `Frame`, from a selection language. The selection language is built by combining basic operations. Each basic operation follows the `<selector>[(<variable>)] <operator> <value>` structure, where `<operator>` is a comparison operator in `== != < <= > >=`.",null,null],[4,"Status","","Possible causes of error in chemfiles",null,null],[13,"Success","","No error",1,null],[13,"CppStdError","","Exception in the C++ standard library",1,null],[13,"ChemfilesCppError","","Exception in the C++ chemfiles library",1,null],[13,"MemoryError","","Error in memory allocations",1,null],[13,"FileError","","Error while reading or writing a file",1,null],[13,"FormatError","","Error in file formatting, i.e. the file is invalid",1,null],[13,"SelectionError","","Error in selection string syntax",1,null],[13,"ConfigurationError","","Error in configuration files syntax",1,null],[13,"OutOfBounds","","Error for out of bounds indexing",1,null],[13,"PropertyError","","Error related to properties",1,null],[13,"UTF8PathError","","The given path is not valid UTF8",1,null],[13,"NullPtr","","We got a null pointer from C++",1,null],[4,"CellShape","","Available unit cell shapes.",null,null],[13,"Orthorhombic","","Orthorhombic cell, with the three angles equals to 90°.",2,null],[13,"Triclinic","","Triclinic cell, with any values for the angles.",2,null],[13,"Infinite","","Infinite cell, to use when there is no cell.",2,null],[4,"Property","","A `Property` is a piece of data that can be associated with an `Atom` or a `Frame`.",null,null],[13,"Bool","","Boolean property",3,null],[13,"Double","","Floating point property",3,null],[13,"String","","String property",3,null],[13,"Vector3D","","3-dimensional vector property",3,null],[5,"set_warning_callback","","Use `callback` for every chemfiles warning. The callback will be passed the warning message.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"version","","Get the version of the chemfiles library.",null,{"inputs":[],"output":{"name":"string"}}],[5,"add_configuration","","Read configuration data from the file at `path`.",null,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"chfl_status"}],"output":{"name":"error"}}],[11,"last_error","","Get the last error message from the C++ library.",0,{"inputs":[],"output":{"name":"string"}}],[11,"cleanup","","Clear any error from the C++ library",0,{"inputs":[],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"atom"}}],[11,"new","","Create an atom with the given `name`, and set the atom type to `name`.",4,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"mass","","Get the atom mass, in atomic mass units.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_mass","","Set the atom mass to `mass`, in atomic mass units.",4,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"charge","","Get the atom charge, in number of the electron charge e.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_charge","","Set the atom charge to `charge`, in number of the electron charge e.",4,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"name","","Get the atom name.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"atomic_type","","Get the atom type.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_name","","Set the atom name to `name`.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"set_atomic_type","","Set the atom type to `atomic_type`.",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"full_name","","Try to get the full name of the atom from the atomic type. For example, the full name of \"He\" is \"Helium\", and so on. If the name can not be found, this function returns the empty string.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"vdw_radius","","Try to get the Van der Waals radius of the atom from the atomic type. If the radius can not be found, returns -1.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"covalent_radius","","Try to get the covalent radius of the atom from the atomic type. If the radius can not be found, returns -1.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"atomic_number","","Try to get the atomic number of the atom from the atomic type. If the number can not be found, returns -1.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set","","Add a new `property` with the given `name` to this atom.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"property"}],"output":{"name":"result"}}],[11,"get","","Get a property with the given `name` in this atom, if it exist.",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cellshape"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"cellshape"}],"output":{"name":"bool"}}],[11,"from","","",2,{"inputs":[{"name":"chfl_cellshape"}],"output":{"name":"cellshape"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"unitcell"}}],[11,"new","","Create an `Orthorhombic` `UnitCell` from the three lengths, in Angstroms.",5,null],[11,"infinite","","Create an `Infinite` `UnitCell`.",5,{"inputs":[],"output":{"name":"result"}}],[11,"triclinic","","Create an `Triclinic` `UnitCell` from the three lengths (in Angstroms) and three angles (in degree). `alpha` is the angle between the vectors `b` and `c`; `beta` is the between the vectors `a` and `c` and `gamma` is the angle between the vectors `a` and `b`.",5,null],[11,"lengths","","Get the three lengths of the cell, in Angstroms.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_lengths","","Set the three lengths of the cell, in Angstroms.",5,null],[11,"angles","","Get the three angles of the cell, in degrees.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_angles","","Set the three angles of the cell, in degrees. This is only possible with `Triclinic` cells.",5,null],[11,"matrix","","Get the unit cell matricial representation.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shape","","Get the shape of the unit cell.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_shape","","Set the shape of the unit cell to `shape`.",5,{"inputs":[{"name":"self"},{"name":"cellshape"}],"output":{"name":"result"}}],[11,"volume","","Get the volume of the unit cell.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wrap","","Wrap a `vector` in this unit cell.",5,null],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"residue"}}],[11,"new","","Create a new residue with the given `name`",6,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"with_id","","Create a new residue with the given `name` and `id` as identifier.",6,{"inputs":[{"name":"s"},{"name":"u64"}],"output":{"name":"result"}}],[11,"natoms","","Get the number of atoms in this residue.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"id","","Get the identifier of this residue in the initial topology file.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"name","","Get the name of this residue.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_atom","","Add the atom at index `i` in this residue.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"contains","","Check if the atom at index `i` is in this residue",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"topology"}}],[11,"new","","Create a new empty topology.",7,{"inputs":[],"output":{"name":"result"}}],[11,"atom","","Get a copy of the atom at index `index` from this topology.",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"size","","Get the current number of atoms in this topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"resize","","Resize this topology to hold `natoms` atoms, inserting dummy atoms if the new size if bigger than the old one.",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"add_atom","","Add an `Atom` at the end of this topology",7,{"inputs":[{"name":"self"},{"name":"atom"}],"output":{"name":"result"}}],[11,"remove","","Remove an `Atom` from this topology by index. This modify all the other atoms indexes.",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"bonds_count","","Get the number of bonds in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"angles_count","","Get the number of angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dihedrals_count","","Get the number of dihedral angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"impropers_count","","Get the number of improper dihedral angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bonds","","Get the list of bonds in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"angles","","Get the list of angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dihedrals","","Get the list of dihedral angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"impropers","","Get the list of improper dihedral angles in the topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_bond","","Add a bond between the atoms at indexes `i` and `j` in the topology.",7,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"remove_bond","","Remove any existing bond between the atoms at indexes `i` and `j` in this topology.",7,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"residue","","Get a copy of the residue at index `index` from this topology.",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"residue_for_atom","","Get a copy of the residue containing the atom at index `index` in this topology, if any.",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"residues_count","","Get the number of residues in this topology.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_residue","","Add a residue to this topology.",7,{"inputs":[{"name":"self"},{"name":"residue"}],"output":{"name":"result"}}],[11,"are_linked","","Check if the two residues `first` and `second` from the `topology` are linked together, i.e. if there is a bond between one atom in the first residue and one atom in the second one.",7,{"inputs":[{"name":"self"},{"name":"residue"},{"name":"residue"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Create an empty frame. It will be resized by the library as needed.",8,{"inputs":[],"output":{"name":"result"}}],[11,"atom","","Get a copy of the atom at index `index` in this frame.",8,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"size","","Get the current number of atoms in this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"resize","","Resize the positions and the velocities in this frame, to make space for `natoms` atoms. Previous data is conserved, as well as the presence of absence of velocities.",8,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"add_atom","","Add an `Atom` and the corresponding position and optionally velocity data to this frame.",8,null],[11,"remove","","Remove the atom at index `i` in this frame.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_bond","","Add a bond between the atoms at indexes `i` and `j` in the frame.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"remove_bond","","Remove any existing bond between the atoms at indexes `i` and `j` in the frame.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_residue","","Remove any existing bond between the atoms at indexes `i` and `j` in the frame.",8,{"inputs":[{"name":"self"},{"name":"residue"}],"output":{"name":"result"}}],[11,"distance","","Get the distance between the atoms at indexes `i` and `j` in this frame, accounting for periodic boundary conditions. The result is expressed in Angstroms.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"angle","","Get the angle formed by the atoms at indexes `i`, `j` and `k` in this frame, accounting for periodic boundary conditions. The result is expressed in radians.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"dihedral","","Get the dihedral angle formed by the atoms at indexes `i`, `j`, `k` and `m` in this frame, accounting for periodic boundary conditions. The result is expressed in radians.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"out_of_plane","","Get the out of plane distance formed by the atoms at indexes `i`, `j`, `k` and `m` in this frame, accounting for periodic boundary conditions. The result is expressed in angstroms.",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"positions","","Get a view into the positions of this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"positions_mut","","Get a mutable view into the positions of this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"velocities","","Get a view into the velocities of this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"velocities_mut","","Get a mutable view into the velocities of this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_velocities","","Check if this frame contains velocity data.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_velocities","","Add velocity data to this frame. If the frame already have velocities, this does nothing.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cell","","Get a copy of the `UnitCell` from this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_cell","","Set the `UnitCell` of this frame to `cell`.",8,{"inputs":[{"name":"self"},{"name":"unitcell"}],"output":{"name":"result"}}],[11,"topology","","Get a copy of the `Topology` from this frame.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_topology","","Set the `Topology` of this frame to `topology`. The topology must contain the same number of atoms that this frame.",8,{"inputs":[{"name":"self"},{"name":"topology"}],"output":{"name":"result"}}],[11,"step","","Get this frame step, i.e. the frame number in the trajectory",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_step","","Set this frame step to `step`.",8,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"guess_topology","","Guess the bonds, angles and dihedrals in this `frame`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set","","Add a new `property` with the given `name` to this frame.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"property"}],"output":{"name":"result"}}],[11,"get","","Get a property with the given `name` in this frame, if it exist.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","Open the file at the given `path` in the given `mode`.",9,{"inputs":[{"name":"p"},{"name":"char"}],"output":{"name":"result"}}],[11,"open_with_format","","Open the file at the given `path` using a specific file `format` and the given `mode`.",9,{"inputs":[{"name":"p"},{"name":"char"},{"name":"s"}],"output":{"name":"result"}}],[11,"read","","Read the next step of this trajectory into a `frame`.",9,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"read_step","","Read a specific `step` of this trajectory into a `frame`.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write","","Write a `frame` to this trajectory.",9,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"set_topology","","Set the `topology` associated with this trajectory. This topology will be used when reading and writing the files, replacing any topology in the frames or files.",9,{"inputs":[{"name":"self"},{"name":"topology"}],"output":{"name":"result"}}],[11,"set_topology_file","","Set the topology associated with this trajectory by reading the first frame of the file at the given `path` using the file format in `format`; and extracting the topology of this frame.",9,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_topology_with_format","","Set the topology associated with this trajectory by reading the first frame of the file at the given `path` using the file format in `format`; and extracting the topology of this frame.",9,{"inputs":[{"name":"self"},{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"set_cell","","Set the unit `cell` associated with a trajectory. This cell will be used when reading and writing the files, replacing any unit cell in the frames or files.",9,{"inputs":[{"name":"self"},{"name":"unitcell"}],"output":{"name":"result"}}],[11,"nsteps","","Get the number of steps (the number of frames) in a trajectory.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"len","","Get the length of the Match.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new match containing the atoms in the `atoms` slice.",10,null],[11,"iter","","Iterate over the atomic indexes in the match.",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"index","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"selection"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new selection from the given selection string.",11,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"size","","Get the size of the selection, i.e. the number of atoms we are selecting together.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"string","","Get the selection string used to create this selection.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"evaluate","","Evaluate a selection for a given frame, and return the corresponding matches.",11,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"list","","Evaluates a selection of size 1 on a given `frame`. This function returns the list of atomic indexes in the frame matching this selection.",11,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"property"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[6,"Result","","Custom result type for working with errors in chemfiles",null,null]],"paths":[[3,"Error"],[4,"Status"],[4,"CellShape"],[4,"Property"],[3,"Atom"],[3,"UnitCell"],[3,"Residue"],[3,"Topology"],[3,"Frame"],[3,"Trajectory"],[3,"Match"],[3,"Selection"]]};
initSearch(searchIndex);
